server {
  # Enforce HTTPS by redirecting requests
  listen 80;
  listen [::]:80;
  server_name {{ inventory_hostname }};

  # Serve certbot ACME requests
  location /.well-known/ {
    root /var/lib/nginx/;
  }

  # Enforce encrypted connections for everything else
  location / {
    return 301 https://{{ inventory_hostname }}$request_uri;
  }
}

map $http_origin $cors_ok {
   default                0;
   ~*https://(.*\.)?tobira.opencast.org$  1;
   ~*http://localhost(:\d+)?$ 1;
    ~*http://127.0.0.1(:\d+)?$ 1;
}

map $cors_ok $cors_origin {
   default  '';
   1            $http_origin;
}

map $cors_ok $cors_credentials {
   default  '';
   1            true;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name {{ inventory_hostname }};

  ssl_certificate_key /etc/nginx/ssl/{{ inventory_hostname }}.key;
  ssl_certificate     /etc/nginx/ssl/{{ inventory_hostname }}.crt;

  # Additional TLS related Nginx options
  include /etc/nginx/conf.d/tls.conf;

  # Accept large ingests
  client_max_body_size 0;

  location /protected {
    internal;
    alias {{ opencast_storage_downloads_path }};
  }

  # Proxy configuration for Opencast
  location / {

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-SSL "on";

    proxy_pass http://127.0.0.1:8080;

    # Make sure to redirect location headers to HTTPS
    proxy_redirect http://$host https://$host;

    # Ensure Cookies are marked as Secure and HTTPOnly
    proxy_cookie_path / "/; HTTPOnly; Secure; SameSite=none";

    # Do not buffer responses
    proxy_buffering off;

    # Do not buffer requests
    proxy_request_buffering off;

    add_header Access-Control-Allow-Origin   '$cors_origin';
    add_header Access-Control-Allow-Credentials  '$cors_credentials';
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
    add_header Access-Control-Allow-Headers 'Origin,Content-Type,Accept,Authorization' always;

    if ($request_method = OPTIONS) {
      return 200;
    }
  }

  # Mount some external streams here for testing (works better with the live
  # schedule service this way). For two of them, we had to use a fixed IP (let's
  # hope that never changes) as using the host name would resolve to an IPv6
  # address that we would fail to connect to occasionally, making the stream
  # unwatchable. Don't ask me.
  location /teststream/ard {
    proxy_pass http://mcdn-daserste.akamaized.net/daserste/de/;
  }
  location /teststream/nasa {
    proxy_set_header referer ""; # NASA returns 403 if a strange referer is set
    proxy_set_header Host ntv1.akamaized.net;
    proxy_pass http://104.77.118.34/hls/live/2014075/NASA-NTV1-HLS/;
  }
  location /teststream/dreisat {
    proxy_set_header referer "";
    proxy_set_header Host zdf-hls-18.akamaized.net;
    proxy_pass https://zdf-hls-18.akamaized.net/hls/live/2016501/dach/high/;
  }
  location /teststream/tearsofsteel {
    proxy_set_header Host cph-p2p-msl.akamaized.net;
    proxy_pass http://23.73.139.50/hls/live/2000341/test;
  }
}
